/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'admin' at '16-6-27 下午2:35' with Gradle 2.5
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.5/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.12'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/


//在执行 gradle actionTask 的时候执行
task actionTask << {
    println 'this is action task'
}

//在脚本初始化的时候执行(initiallization 阶段)
task noActionTask {
    println 'this is no action task'
}


task taskX(dependsOn: 'taskY') << {
    println 'taskX'
}

task taskY() {
    println 'taskY'
}

3.times {
    counter->task "task$counter" << {
            println "this is task number $counter"
        }
}

task hello << {
    println 'hello'
}


hello.doLast {
    println "this is name: $hello.name task"
}


task myTask {
    ext.myPro = "myValue"
    ext.myTestKey = "myTestValue"
}


task printTaskProperty << {
    println myTask.myPro + ":" +myTask.myTestKey
}


defaultTasks 'hello', 'printTaskProperty'

task(hello2) << {
    println 'this is hello 2'
}

task 'hello3' << {
    println 'this is hello 3'
}

task('hello4') << {
    println 'this is hello 4'
}

tasks.create(name: 'hello5') << {
    println 'this is hello 5'
}

println tasks.hello5.name

//project(':make_script') {
//    task scriptTask
//}

task A << {println 'A'}
task B << {println 'B'}
task C << {println 'C'}

C.dependsOn A
C.dependsOn B
B.mustRunAfter A


task unit << {println 'Hello from unit tests'}
task ui << {println 'Hello from UI tests'}
task tests << {println 'Hello from all tests!'}
task mergeReports << {println 'Merging test reports'}

tests.dependsOn unit
tests.dependsOn ui
ui.mustRunAfter unit
mergeReports.dependsOn tests // 执行这个就可以合并了。

// 下面这种方式等价于上面这种
tests.dependsOn unit
tests.dependsOn ui
ui.mustRunAfter unit
mergeReports.dependsOn tests